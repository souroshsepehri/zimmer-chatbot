#!/usr/bin/env python3
"""
Test chatbot consistency with multiple queries
"""

import requests
import time
import json

def test_chatbot_consistency():
    """Test chatbot with various queries to identify inconsistencies"""
    
    test_queries = [
        "ÿ≥ŸÅÿßÿ±ÿ¥",
        "⁄Üÿ∑Ÿàÿ± ÿ≥ŸÅÿßÿ±ÿ¥ ÿ®ÿØŸÖÿü",
        "ÿ≥ÿßÿπÿßÿ™ ⁄©ÿßÿ±€å",
        "ÿ≥ÿßÿπÿßÿ™ ⁄©ÿßÿ±€å ÿ¥ŸÖÿß ⁄Ü€åŸáÿü",
        "ŸÇ€åŸÖÿ™",
        "ŸÇ€åŸÖÿ™‚ÄåŸáÿß€å ÿ¥ŸÖÿß ⁄ÜŸÇÿØÿ±Ÿáÿü",
        "ÿ™ŸÖÿßÿ≥",
        "⁄Üÿ∑Ÿàÿ± ŸÖ€å‚Äåÿ™ŸàŸÜŸÖ ÿ®ÿß ÿ¥ŸÖÿß ÿ™ŸÖÿßÿ≥ ÿ®⁄Ø€åÿ±ŸÖÿü",
        "⁄Øÿßÿ±ÿßŸÜÿ™€å",
        "ÿ¢€åÿß ⁄Øÿßÿ±ÿßŸÜÿ™€å ÿØÿßÿ±€åÿØÿü",
        "ÿ≥ŸàÿßŸÑ ŸÜÿßŸÖÿ±ÿ®Ÿàÿ∑",
        "⁄Ü€åÿ≤€å ⁄©Ÿá ÿØÿ± ÿØ€åÿ™ÿßÿ®€åÿ≥ ŸÜ€åÿ≥ÿ™",
        "ÿ≥ŸÑÿßŸÖ",
        "⁄©ŸÖ⁄©",
        "Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å"
    ]
    
    print("üß™ Testing Chatbot Consistency")
    print("=" * 50)
    
    results = []
    
    for i, query in enumerate(test_queries, 1):
        try:
            print(f"\n{i:2d}. Testing: '{query}'")
            
            response = requests.post("http://localhost:8002/api/chat", json={
                "message": query,
                "debug": True
            })
            
            if response.status_code == 200:
                data = response.json()
                answer = data.get('answer', 'No answer')
                source = data.get('debug_info', {}).get('source', 'unknown')
                success = data.get('debug_info', {}).get('success', False)
                
                print(f"    ‚úÖ Status: 200")
                print(f"    üìù Answer: {answer[:100]}{'...' if len(answer) > 100 else ''}")
                print(f"    üîç Source: {source}")
                print(f"    ‚úÖ Success: {success}")
                
                results.append({
                    "query": query,
                    "answer": answer,
                    "source": source,
                    "success": success,
                    "status": "success"
                })
                
            else:
                print(f"    ‚ùå Status: {response.status_code}")
                print(f"    ‚ùå Error: {response.text}")
                
                results.append({
                    "query": query,
                    "status": "error",
                    "error": response.text
                })
                
        except Exception as e:
            print(f"    ‚ùå Exception: {e}")
            results.append({
                "query": query,
                "status": "exception",
                "error": str(e)
            })
        
        # Small delay between requests
        time.sleep(0.5)
    
    # Analyze results
    print("\n" + "=" * 50)
    print("üìä CONSISTENCY ANALYSIS")
    print("=" * 50)
    
    successful_queries = [r for r in results if r.get('status') == 'success']
    error_queries = [r for r in results if r.get('status') == 'error']
    exception_queries = [r for r in results if r.get('status') == 'exception']
    
    print(f"‚úÖ Successful responses: {len(successful_queries)}/{len(test_queries)}")
    print(f"‚ùå Error responses: {len(error_queries)}")
    print(f"üí• Exception responses: {len(exception_queries)}")
    
    # Check for inconsistent sources
    sources = {}
    for result in successful_queries:
        source = result.get('source', 'unknown')
        sources[source] = sources.get(source, 0) + 1
    
    print(f"\nüìà Response Sources:")
    for source, count in sources.items():
        print(f"   {source}: {count} responses")
    
    # Check for failed queries
    failed_queries = [r for r in successful_queries if not r.get('success', False)]
    if failed_queries:
        print(f"\n‚ö†Ô∏è  Queries that returned fallback answers: {len(failed_queries)}")
        for result in failed_queries:
            print(f"   - '{result['query']}'")
    
    # Check for empty or very short answers
    short_answers = [r for r in successful_queries if len(r.get('answer', '')) < 20]
    if short_answers:
        print(f"\n‚ö†Ô∏è  Very short answers: {len(short_answers)}")
        for result in short_answers:
            print(f"   - '{result['query']}' -> '{result['answer']}'")
    
    # Save detailed results
    with open('chatbot_test_results.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ Detailed results saved to: chatbot_test_results.json")
    
    return results

if __name__ == "__main__":
    test_chatbot_consistency()
